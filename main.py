import sys
import logging
import flask
from template import TemplateEngine
from pickleball import League, ScoringSystem
from db import LeagueRepository

try:
    import version #auto-generated by "make deploy"
except ImportError:
    version = type('Version', (), {'git_commit': 'N/A', 'deploy_timestamp': 'N/A'})()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(name)s] [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

app = flask.Flask(__name__)

template_engine = TemplateEngine()

@app.route("/")
def root():
    return template_engine.render("index", {"version": version})

@app.route("/create-league", methods=["POST"])
def create_league():
    player_names = flask.request.form["player_names"]
    league_name = flask.request.form["league_name"]
    logger.info(f"Creating league name=[{league_name}] for players=[{player_names}]")

    league = League(name=league_name, player_names=player_names)
    league.set_scoring_system(ScoringSystem(flask.request.form["scoring_system"]))
    league.set_template(flask.request.form["template"])
    
    rounds = int(flask.request.form["rounds"])
    if rounds == 0:
        if len(league.players) == 4:
            rounds = 3
        elif len(league.players) == 5:
            rounds = 5
        elif len(league.players) >= 6:
            rounds = 7
    
    if len(league.players) < 4:
        logger.error(f"Invalid number of players: {len(league.players)}")
        return flask.redirect("/")
    
    if (rounds > 4 and len(league.players) <= 4) or (rounds > 6 and len(league.players) <= 5):
        logger.error(f"Invalid number of rounds: {rounds} for {len(league.players)} players")
        return flask.redirect("/")
    
    league.generate_schedule(rounds=rounds)
    LeagueRepository.save_league(league)
    logger.info(f"League created successfully: {league.id}")
    return flask.redirect(f"/league/{league.id}")

@app.route("/save_league", methods=["POST"])
def save_league():
    league_id = flask.request.form["league_id"]
    league = LeagueRepository.get_league(league_id)
    
    for round in league.schedule:
        player_index = 1
        for player in league.players:
            player_score = None
            try:
                player_score = flask.request.form[f"player_score_round{round.number}_player{player_index}"]
            except KeyError:
                pass

            if player_score:
                for game in round.games:
                    player_names = [p.name for p in game.players]
                    
                    if player.name in player_names:
                        
                        if game.scoring_system == ScoringSystem.SCORE:
                            game_score = game.score
                            
                            if player.name in player_names[:2]:
                                game_score[0] = int(player_score)
                            else:
                                game_score[1] = int(player_score)
                            
                            game.set_score(game_score)
                        
                        if game.scoring_system == ScoringSystem.W_L:
                            if player.name in player_names[:2]:
                                if player_score == "w":
                                    game.set_winner_team(1)
                                if player_score == "l":
                                    game.set_winner_team(2)
                            else:
                                if player_score == "w":
                                    game.set_winner_team(2)
                                if player_score == "l":
                                    game.set_winner_team(1)
            
            player_index += 1
    
    LeagueRepository.save_league(league)
    return flask.redirect(f"/league/{league_id}")

@app.route("/league/<league_id>")
def league(league_id):
    try:
        league = LeagueRepository.get_league(league_id)
        return template_engine.render(f"league_{league.template}", {
            "league": league,
            "width": 80/len(league.players)
        })
    except KeyError:
        return template_engine.render("error", {
            "title": "League not found",
            "message": "The league you are looking for does not exist."
        })

if __name__ == "__main__":
    logger.info("Running AppEngine server locally")
    app.run(host="127.0.0.1", port=8080, debug=True)