import sys
import logging
import flask
from template import TemplateEngine
from pickleball import League
from db import LeagueRepository

try:
    import version #auto-generated by "make deploy"
except ImportError:
    version = type('Version', (), {'git_commit': 'N/A', 'deploy_timestamp': 'N/A'})()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(name)s] [%(levelname)s] %(message)s', datefmt='%Y-%m-%d %H:%M:%S')

app = flask.Flask(__name__)

template_engine = TemplateEngine()

@app.route("/")
def root():
    return template_engine.render("index", {"version": version})

@app.route("/create-league", methods=["POST"])
def create_league():
    player_names = flask.request.form["player_names"]
    league_name = flask.request.form["league_name"]
    logger.info(f"Creating league name=[{league_name}] for players=[{player_names}]")

    league = League(name=league_name, player_names=player_names)

    rounds = 0
    if len(league.players) == 4:
        rounds = 3
    elif len(league.players) == 5:
        rounds = 5
    elif len(league.players) >= 6:
        rounds = 7

    if rounds == 0:
        logger.error(f"Invalid number of players: {len(league.players)}")
        return flask.redirect("/")

    league.generate_schedule(rounds=rounds)
    LeagueRepository.save_league(league)
    logger.info(f"League created successfully: {league.id}")
    return flask.redirect(f"/league/{league.id}")

@app.route("/league/<league_id>")
def league(league_id):
    try:
        league = LeagueRepository.get_league(league_id)
        return template_engine.render("league", {
            "league": league,
            "width": 80/len(league.players)
        })
    except KeyError:
        return '''
        <h1>League not found</h1>
        <p>The league you are looking for does not exist.</p>
        <p>Please check the URL and try again.</p>
        <a href="/">Back to home</a>
        '''

if __name__ == "__main__":
    logger.info("Running AppEngine server locally")
    app.run(host="127.0.0.1", port=8080, debug=True)